/** \file
 *  This C header file was generated by $ANTLR version 3.5.3
 *
 *     -  From the grammar source file : A:/Projects/studying/SSLab/tests/lang.g
 *     -                            On : 2024-10-10 01:42:16
 *     -                 for the lexer : langLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
lang

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef plang, which is returned from a call to langNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in plang are  as follows:
 *
 *  - 
 void
      plang->IDENTIFIER(plang)
 *  - 
 void
      plang->STRING(plang)
 *  - 
 void
      plang->CHAR(plang)
 *  - 
 void
      plang->HEX(plang)
 *  - 
 void
      plang->BITS(plang)
 *  - 
 void
      plang->DEC(plang)
 *  - 
 void
      plang->BOOL(plang)
 *  - 
 void
      plang->ITEM(plang)
 *  - 
 void
      plang->LIST(plang)
 *  - 
 void
      plang->BUILTIN_TYPE(plang)
 *  - 
 void
      plang->CUSTOM_TYPE(plang)
 *  - 
 void
      plang->TYPE_REF(plang)
 *  - 
 void
      plang->ARRAY_TYPE(plang)
 *  - 
 void
      plang->BINOP(plang)
 *  - 
 void
      plang->UNOP(plang)
 *  - 
 void
      plang->EXPR(plang)
 *  - 
 void
      plang->EXPR_PRIMARY(plang)
 *  - 
 void
      plang->EXPR_SUFFIX(plang)
 *  - 
 void
      plang->EXPR_BINARY_SUFFIX(plang)
 *  - 
 void
      plang->EXPR_CALL_SUFFIX(plang)
 *  - 
 void
      plang->EXPR_INDEXER_SUFFIX(plang)
 *  - 
 void
      plang->EXPR_BRACES(plang)
 *  - 
 void
      plang->EXPR_UNARY(plang)
 *  - 
 void
      plang->EXPR_PLACE(plang)
 *  - 
 void
      plang->EXPR_LITERAL(plang)
 *  - 
 void
      plang->STATEMENT(plang)
 *  - 
 void
      plang->STATEMENT_IF(plang)
 *  - 
 void
      plang->STATEMENT_BLOCK(plang)
 *  - 
 void
      plang->STATEMENT_WHILE(plang)
 *  - 
 void
      plang->STATEMENT_DO(plang)
 *  - 
 void
      plang->STATEMENT_BREAK(plang)
 *  - 
 void
      plang->STATEMENT_EXPRESSION(plang)
 *  - 
 void
      plang->FUNC_BODY(plang)
 *  - 
 void
      plang->FUNC_ARG_DEF(plang)
 *  - 
 void
      plang->FUNC_SIGNATURE(plang)
 *  - 
 void
      plang->FUNC_DEF(plang)
 *  - 
 void
      plang->SOURCE_ITEM(plang)
 *  - 
 void
      plang->SOURCE(plang)
 *  - 
 void
      plang->Tokens(plang)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_lang_H
#define _lang_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct lang_Ctx_struct lang, * plang;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for 
lang

 */
struct lang_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mIDENTIFIER)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct lang_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct lang_Ctx_struct * ctx);

     void
     (*mHEX)	(struct lang_Ctx_struct * ctx);

     void
     (*mBITS)	(struct lang_Ctx_struct * ctx);

     void
     (*mDEC)	(struct lang_Ctx_struct * ctx);

     void
     (*mBOOL)	(struct lang_Ctx_struct * ctx);

     void
     (*mITEM)	(struct lang_Ctx_struct * ctx);

     void
     (*mLIST)	(struct lang_Ctx_struct * ctx);

     void
     (*mBUILTIN_TYPE)	(struct lang_Ctx_struct * ctx);

     void
     (*mCUSTOM_TYPE)	(struct lang_Ctx_struct * ctx);

     void
     (*mTYPE_REF)	(struct lang_Ctx_struct * ctx);

     void
     (*mARRAY_TYPE)	(struct lang_Ctx_struct * ctx);

     void
     (*mBINOP)	(struct lang_Ctx_struct * ctx);

     void
     (*mUNOP)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_PRIMARY)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_SUFFIX)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_BINARY_SUFFIX)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_CALL_SUFFIX)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_INDEXER_SUFFIX)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_BRACES)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_UNARY)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_PLACE)	(struct lang_Ctx_struct * ctx);

     void
     (*mEXPR_LITERAL)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_IF)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_BLOCK)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_WHILE)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_DO)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_BREAK)	(struct lang_Ctx_struct * ctx);

     void
     (*mSTATEMENT_EXPRESSION)	(struct lang_Ctx_struct * ctx);

     void
     (*mFUNC_BODY)	(struct lang_Ctx_struct * ctx);

     void
     (*mFUNC_ARG_DEF)	(struct lang_Ctx_struct * ctx);

     void
     (*mFUNC_SIGNATURE)	(struct lang_Ctx_struct * ctx);

     void
     (*mFUNC_DEF)	(struct lang_Ctx_struct * ctx);

     void
     (*mSOURCE_ITEM)	(struct lang_Ctx_struct * ctx);

     void
     (*mSOURCE)	(struct lang_Ctx_struct * ctx);

     void
     (*mTokens)	(struct lang_Ctx_struct * ctx);















































    const char * (*getGrammarFileName)();
    void            (*reset)  (struct lang_Ctx_struct * ctx);
    void	    (*free)   (struct lang_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API plang langNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API plang langNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ARRAY_TYPE      4
#define BINOP      5
#define BITS      6
#define BOOL      7
#define BUILTIN_TYPE      8
#define CHAR      9
#define CUSTOM_TYPE      10
#define DEC      11
#define EXPR      12
#define EXPR_BINARY_SUFFIX      13
#define EXPR_BRACES      14
#define EXPR_CALL_SUFFIX      15
#define EXPR_INDEXER_SUFFIX      16
#define EXPR_LITERAL      17
#define EXPR_PLACE      18
#define EXPR_PRIMARY      19
#define EXPR_SUFFIX      20
#define EXPR_UNARY      21
#define FUNC_ARG_DEF      22
#define FUNC_BODY      23
#define FUNC_DEF      24
#define FUNC_SIGNATURE      25
#define HEX      26
#define IDENTIFIER      27
#define ITEM      28
#define LIST      29
#define SOURCE      30
#define SOURCE_ITEM      31
#define STATEMENT      32
#define STATEMENT_BLOCK      33
#define STATEMENT_BREAK      34
#define STATEMENT_DO      35
#define STATEMENT_EXPRESSION      36
#define STATEMENT_IF      37
#define STATEMENT_WHILE      38
#define STRING      39
#define TYPE_REF      40
#define UNOP      41
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for lang
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
